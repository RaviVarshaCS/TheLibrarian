csharp
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DialogueManager : MonoBehaviour
{
    // UI elements for displaying dialogue
    public GameObject dialoguePanel;
    public UnityEngine.UI.Text dialogueText;


    // Method to start dialogue with another character
    public void StartDialogue(Transform otherCharacter)
    {
        // Display character's name and dialogue
        string characterName = otherCharacter.name;
        string dialogue = GetDialogue(characterName);
        
        // Show the dialogue panel and update text
        dialoguePanel.SetActive(true);
        dialogueText.text = dialogue;


        // Optionally, add logic to hide dialogue after a delay or on input
        Invoke("HideDialogue", 5f); // Hide after 5 seconds for demo purpose
    }


    private string GetDialogue(string characterName)
    {
        
        switch (characterName)
        {
            case "CharacterA":
                return "Hello, I'm Character A!";
            case "CharacterB":
                return "Hi there! I'm Character B.";
            default:
                return "Nice to meet you!";
        }
    }


    private void HideDialogue()
    {
        dialoguePanel.SetActive(false);
    }
}




public class PlayerInteraction : MonoBehaviour
{
    public float interactionDistance = 2f; 
    public LayerMask interactableLayer; 


    void Update()
    {
        if (Input.GetKeyDown(KeyCode.E)) //  E is interaction key
        {
            InteractWithObjects();


        }
    }


    private void InteractWithObjects()
    {
        RaycastHit hit;
        if (Physics.Raycast(transform.position, transform.forward, out hit, interactionDistance, interactableLayer))
        {
            IInteractable interactable = hit.collider.GetComponent<IInteractable>();
            if (interactable != null)
            {
                interactable.Interact(); // Call the interact method
            }
        }
    }




public interface IInteractable
{
    void Interact();
}


public class Book : MonoBehaviour, IInteractable
{
    public void Interact()
    {
        // Logic for opening the book
        OpenBook();
    }


    private void OpenBook()
    {
        Debug.Log("You opened the book!");
        // Add your logic to display book content here
    }


    public void ShelveBook()
    {
        Debug.Log("You shelved the book!");
        // Logic to shelve the book
    }
}


public class InventorySystem : MonoBehaviour
{
    private List<Book> books = new List<Book>(); // List to hold the player's books


    public void AddBook(Book book)
    {
        books.Add(book);
        Debug.Log($"Added {book.bookTitle} to inventory.");
    }


    public void ShelveBook(Book book)
    {
        if (books.Contains(book))
        {
            book.ShelveBook();
        }
        else
        {
            Debug.Log("Book not found in inventory.");
        }
    }


public void HideBook(Book book)
    {
        if (books.Contains(book))
        {
            book.HideBook();
        }
        else
        {
            Debug.Log("Book not found in inventory.");
        }
    }
}


public class Book : MonoBehaviour, IInteractable
{
    public string bookTitle; // Title of the book for reporting
    private bool isShelved = false; // Flag for whether the book is shelved


    public void Interact()
    {
        // Logic for opening a menu or performing actions
        ShowBookOptions();
    }


    private void ShowBookOptions()
    {
        // Here you would normally show a UI with options like "Shelve", "Report", "Hide"
        Debug.Log($"Options for {bookTitle}: Shelve, Report, Hide");
        
        // Example calls to the respective actions (you would call these based on user input)
        // ShelveBook(); // Uncomment based on user selection
        // ReportBook(); // Uncomment based on user selection
        // HideBook(); // Uncomment based on user selection
    }


    public void ShelveBook()
    {
        if (!isShelved)
        {
            isShelved = true;
            Debug.Log($"{bookTitle} has been shelved!");
            // Add logic to visually shelve the book (e.g., move it to a different parent)
        }
        else
        {
            Debug.Log($"{bookTitle} is already shelved.");
        }
    }


    public void ReportBook()
    {
        Debug.Log($"Reporting {bookTitle}...");
        // Logic to report the book (e.g., send information to a server or log it)
    }


    public void HideBook()
    {
        Debug.Log($"Hiding {bookTitle}...");
        // Logic to hide the book, e.g., disable game object or change its visibility
        gameObject.SetActive(false);
    }
}


public class Note : MonoBehaviour, IInteractable
{
    public void Interact()
    {
        // Logic for opening the note
        OpenNote();
    }


    private void OpenNote()
    {
        Debug.Log("You opened the note!");
        // Add your logic to display note content here
    }
}

public class XPManager : MonoBehaviour
{
    // XP values for different tasks
    private const int DAILY_TASK_XP = 10;
    private const int DANGEROUS_BOOK_XP = 10;
    private const int RESTRICTING_BOOK_XP = 5;
    private const int HIDING_BOOK_XP = 5;


    // XP values for relationships
    private const int SHELVING_WANTED_BOOK_XP = 10;
    private const int RESTRICTING_WANTED_BOOK_XP = 10;
    private const int HIDING_WANTED_BOOK_XP = 5;


    // Current XP values
    private int reputationXP = 0;
    private int relationshipXP = 0;


    // Experience thresholds for leveling up
    private const int LEVEL_UP_THRESHOLD = 100; // Customize as needed


    // UI References
    [SerializeField] private Slider reputationSlider;
    [SerializeField] private Slider relationshipSlider;
    [SerializeField] private Text reputationText;
    [SerializeField] private Text relationshipText;


    private void Start()
    {
        UpdateUI(); // Initialize UI
    }


    public void CompleteDailyTasks()
    {
        AddReputationXP(DAILY_TASK_XP);
        // Add other daily tasks here
    }


    public void ShelveDangerousBook(bool hasSufficientRelationship)
    {
        if (hasSufficientRelationship)
        {
            AddReputationXP(DANGEROUS_BOOK_XP);
        }
    }


    public void RestrictBook()
    {
        AddReputationXP(RESTRICTING_BOOK_XP);
    }


    public void HideBook()
    {
        AddReputationXP(HIDING_BOOK_XP);
    }


    public void ShelveWantedBook()
    {
        AddRelationshipXP(SHELVING_WANTED_BOOK_XP);
    }


    public void RestrictWantedBook()
    {
        AddRelationshipXP(RESTRICTING_WANTED_BOOK_XP);
    }


    public void HideWantedBook()
    {
        AddRelationshipXP(HIDING_WANTED_BOOK_XP);
    }


    private void AddReputationXP(int amount)
    {
        reputationXP += amount;
        CheckLevelUp(ref reputationXP);
        UpdateUI();
    }


    private void AddRelationshipXP(int amount)
    {
        relationshipXP += amount;
        CheckLevelUp(ref relationshipXP);
        UpdateUI();
    }


    private void CheckLevelUp(ref int xp)
    {
        if (xp >= LEVEL_UP_THRESHOLD)
        {
            xp -= LEVEL_UP_THRESHOLD; // Reset XP after leveling up
            // Handle level up logic (e.g., increase player level, show notification)
        }
    }


    private void UpdateUI()
    {
        reputationSlider.value = (float)reputationXP / LEVEL_UP_THRESHOLD;
        reputationText.text = $"{reputationXP} / {LEVEL_UP_THRESHOLD} XP";


        relationshipSlider.value = (float)relationshipXP / LEVEL_UP_THRESHOLD;
        relationshipText.text = $"{relationshipXP} / {LEVEL_UP_THRESHOLD} XP";
    }
}


